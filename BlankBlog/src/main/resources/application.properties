# ==============================================================
# = Server port to use
# ==============================================================
server.port=8080

# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.cache=TRUE

# ==============================================================
# = Disable the Whitelabel Error Page 
# ==============================================================
server.error.whitelabel.enabled=FALSE

# ==============================================================
# = DATA SOURCE - MySQL
# ==============================================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/bbdatabase?createDatabaseIfNotExist=true&characterEncoding=utf8&useSSL=false&serverTimezone=America/Chicago
spring.datasource.username=blankblog
spring.datasource.password=abc123
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.users-query=select user_name, password_hash, id from users where user_name=?
#spring.queries.roles-query=select u.user_name, r.role from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.user_name=?
# Don't want to use roles for now so set all as ADMIN
# ==============================================================
# if you want to use hasRole('ADMIN'), use this:
#spring.queries.roles-query=select user_name, 'ROLE_ADMIN' AS 'role' from users where user_name=?
# ==============================================================
# if you want to use hasAuthority('ADMIN'), use this:
spring.queries.roles-query=select user_name, 'ADMIN' AS 'role' from users where user_name=?

# ==============================================================
# = JPA / HIBERNATE
# ==============================================================
# Configure Hibernate DDL mode: create / update
#   spring.jpa.properties.hibernate.hbm2ddl.auto = create
# 	spring.jpa.properties.hibernate.hbm2ddl.auto = update
#
# Create the Database with hbm2ddl.auto
# Ensure the hbm2ddl is enabled (value "create"). NOTE, this needs to be done once !!!, after creating the initial DB setup change to update 
# This will drop the database at application startup and will re-create the database tables according to the entity classes found in the project.
# ==============================================================
spring.jpa.show-sql=TRUE
#spring.jpa.open-in-view=TRUE
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#spring.jpa.properties.hibernate.format_sql=TRUE

# ==============================================================
# = Logging
# = https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html
# ===============================
#logging.file=logs/blog_error.log
#logging.level.root=WARN
#logging.level.blog = WARN
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor=TRACE
#logging.level.org.hibernate.type.descriptor.sql=TRACE
#logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
